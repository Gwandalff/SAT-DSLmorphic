/*
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl1.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.xtext.example.mydsl1.mSat.SATMorphic

@ExtendWith(InjectionExtension)
@InjectWith(MSatInjectorProvider)
class MSatParsingTest {
	@Inject
	ParseHelper<SATMorphic> parseHelper
	
	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
			solver sat4j-jar 
			benchmark-formula (A v B)
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	
	@Test
	def void loadModel2() {
		val result = parseHelper.parse('''
			solver sat4j-jar sat4j-maven
			benchmark-formula (A v B) ^ !A
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void loadModel3() {
		val result = parseHelper.parse('''
			solver sat4j-jar sat4j-maven minisat
			benchmark-DIMACS "foo1.cnf", "foo2.cnf"
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	
	@Test
	def void loadModel4() {
		val result = parseHelper.parse('''
			solver minisat
			benchmark-DIMACS "foo1.cnf"
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
}
