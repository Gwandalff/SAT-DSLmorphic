/**
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl1.tests;

import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.xtext.example.mydsl1.mSat.SATMorphic;
import org.xtext.example.mydsl1.tests.MSatInjectorProvider;

@ExtendWith(InjectionExtension.class)
@InjectWith(MSatInjectorProvider.class)
@SuppressWarnings("all")
public class MSatParsingTest {
  @Inject
  private ParseHelper<SATMorphic> parseHelper;
  
  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("solver sat4j-jar ");
      _builder.newLine();
      _builder.append("benchmarkFormula (A v B)");
      _builder.newLine();
      final SATMorphic result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void loadModel2() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("solver sat4j-jar sat4j-maven");
      _builder.newLine();
      _builder.append("benchmarkFormula (A v B) ^ !A");
      _builder.newLine();
      final SATMorphic result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void loadModel3() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("solver sat4j-jar sat4j-maven minisat");
      _builder.newLine();
      _builder.append("benchmarkDIMACS \"foo1.cnf\", \"foo2.cnf\"");
      _builder.newLine();
      final SATMorphic result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void loadModel4() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("solver minisat");
      _builder.newLine();
      _builder.append("benchmarkDIMACS \"foo1.cnf\"");
      _builder.newLine();
      final SATMorphic result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void loadModelCrypto() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("solver cryptominisat");
      _builder.newLine();
      _builder.append("benchmarkDIMACS \"foo1.cnf\"");
      _builder.newLine();
      final SATMorphic result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void loadModelCryptoParameters() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("solver minisat rnd-freq 0.1");
      _builder.newLine();
      _builder.append("benchmarkDIMACS \"foo1.cnf\", \"foo2.cnf\"");
      _builder.newLine();
      final SATMorphic result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void loadModelCryptoParametersZero() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("solver minisat rnd-freq 0.0");
      _builder.newLine();
      _builder.append("benchmarkDIMACS \"foo1.cnf\", \"foo2.cnf\"");
      _builder.newLine();
      final SATMorphic result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void loadModelCryptoParametersOne() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("solver minisat rnd-freq 1");
      _builder.newLine();
      _builder.append("benchmarkDIMACS \"foo1.cnf\", \"foo2.cnf\"");
      _builder.newLine();
      final SATMorphic result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void loadModelCryptoWrongParameters() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("solver minisat rnd-freq 2 // between 0 and 1");
      _builder.newLine();
      _builder.append("benchmarkDIMACS \"foo1.cnf\", \"foo2.cnf\"");
      _builder.newLine();
      final SATMorphic result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      int _size = errors.size();
      boolean _greaterEqualsThan = (_size >= 1);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_greaterEqualsThan, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void loadSolvers() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("solver ");
      _builder.newLine();
      _builder.append("\t   ");
      _builder.append("minisat rnd-freq 1");
      _builder.newLine();
      _builder.append("\t   ");
      _builder.append("cryptominisat");
      _builder.newLine();
      _builder.append("benchmarkDIMACS \"foo1.cnf\", \"foo2.cnf\"");
      _builder.newLine();
      final SATMorphic result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
