/*
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.GJ_MC_Tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.xtext.example.mydsl.GJ_MC_Process.ConjunctiveNormalForm
import org.xtext.example.mydsl.GJ_MC_Process.SATUtils
import org.xtext.example.mydsl.sat.Expression
import org.xtext.example.mydsl.tests.SatInjectorProvider
import org.xtext.example.mydsl.GJ_MC_Process.Sat4JCompiler

@ExtendWith(InjectionExtension)
@InjectWith(SatInjectorProvider)
class SatCNFTest {
	@Inject
	ParseHelper<Expression> parseHelper
	
	@Test
	def void basicNotTest() {
		val result = parseHelper.parse('''
			!A
		''')
		val cnf = ConjunctiveNormalForm.toCleanCNF(result)
		
		val oracle = parseHelper.parse('''
			!A
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')

		Assertions.assertTrue(SATUtils.equals(cnf, oracle))
	}
	
	@Test
	def void basicOrTest() {
		val result = parseHelper.parse('''
			A v B
		''')
		val cnf = ConjunctiveNormalForm.toCleanCNF(result)
		
		val oracle = parseHelper.parse('''
			A v B
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
		Assertions.assertTrue(SATUtils.equals(cnf, oracle))
	}
	
	@Test
	def void basicAndTest() {
		val result = parseHelper.parse('''
			A ^ B
		''')
		val cnf = ConjunctiveNormalForm.toCleanCNF(result)
		
		val oracle = parseHelper.parse('''
			A ^ B
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')

		Assertions.assertTrue(SATUtils.equals(cnf, oracle))
	}
	
	@Test
	def void basicDNFFormTest() {
		val result = parseHelper.parse('''
			A ^ B v C ^ D
		''')
		val cnf = ConjunctiveNormalForm.toCleanCNF(result)
		
		val oracle = parseHelper.parse('''
			((A v C) ^ (A v D)) ^ ((B v C) ^ (B v D))
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
		Assertions.assertTrue(SATUtils.equals(cnf, oracle))
	}
	
	@Test
	def void basicCNFFormTest() {
		val result = parseHelper.parse('''
			(A v B) ^ (C v D)
		''')
		val cnf = ConjunctiveNormalForm.toCleanCNF(result)
		
		val oracle = parseHelper.parse('''
			(A v B) ^ (C v D)
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
		Assertions.assertTrue(SATUtils.equals(cnf, oracle))
	}
	
	@Test
	def void ComplexExpressionTest() {
		val result = parseHelper.parse('''
			!A v B ^ (!C v D) v E
		''')
		val cnf = ConjunctiveNormalForm.toCleanCNF(result)
		
		val oracle = parseHelper.parse('''
			(E v (!A v B)) ^ ((!A v !C) v (D v E))
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
		Assertions.assertTrue(SATUtils.equals(cnf, oracle))
	}
	
}
